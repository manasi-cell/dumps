PRACTICAL NO: 2(A)

Title: Implement AND/NOT function using McCulloch-Pits neuron

Source code:
Aim: Generate AND/NOT function using McCulloch-Pits (M-P) neural net.

# Logic: In the case of ANDNOT function,
# the response is true if the first input is true and the second input is false.
# Threshold for this neural network will be theta > = 1
# There are two inputs and binary values will be taken as input i.e. either 0 or 1.

num_ip = int(input("Enter the number of inputs : "))
print("For the ", num_ip , " inputs calculate the net input using yin = x1w1 + x2w2 ")
theta = 1
x1 =[]
x2 =[]

for i in range(0,num_ip):
    a = int(input("Enter the input x1: "))
    x1.append(a)
    b = int(input("Enter the input x2: "))
    x2.append(b)

    print("x1 = ", x1)
    print("x2 = ", x2)
    print("Value of theta is 1.")

    print("Case 1: For calculating the net input the weight is considered as w1 = w2 = 1")
    w1 = w2 = 1
    case_y1 =[]
    case_yin1 = []
    print("x1  w1  x2  w2   case_y1     case_yin1")
    
    for i in range(0,num_ip):
        case_y1.append(x1[i]*w1 + x2[i]*w2)
        if (case_y1[i] >= theta):
            case_yin1.append( 1 )
        else:
            case_yin1.append( 0 )
        print(x1[i]," ", w1," ",x2[i]," ",w2,"        ", case_y1[i],"           ",case_yin1[i])
    print("From the calculated net inputs, it is not possible to fire the neuron form input (1, 0) only." 
    "\n Hence, these weights are not suitable. ")

print("Case 2: For calculating the net input the weight is considered as w1 = 1, w2 = -1")
    w1 = 1
    w2 = -1
    case_y2 =[]
    case_yin2 = []
    print("x1  w1  x2  w2   case_y2     case_yin2")
    
for i in range(0,num_ip):
    case_y2.append(x1[i]*w1 + x2[i]*w2)
    if (case_y2[i] >= theta):
        case_yin2.append( 1 )
    else:
        case_yin2.append( 0 )
    print(x1[i]," ", w1," ",x2[i]," ",w2,"        ", case_y2[i],"           ",case_yin2[i])


PRACTICAL NO: 2B

Title: Creating XOR network with the two neurons in the hidden layers.

Source code:
Aim: Generate AND/NOT function using McCulloch-Pits (M-P) neural net.
#Aim: Creating XOR network with the two neurons in the hidden layers.
#Getting weights and threshold value
import numpy as np
print("Enter Weights")
w11 = int(input("Weight w11 = "))
w12 = int(input("Weight w12 = "))
w21 = int(input("Weight w21 = "))
w22 = int(input("Weight w22 = "))
v1 = int(input("Weight v1 = "))
v2 = int(input("Weight v2 = "))
print("Enter Threshold value")

theta = int(input("theta="))
x1 = np.array([0,0,1,1])
x2 = np.array([0,1,0,1])
z = np.array([0,1,1,0])
con = 1
y1 = np.zeros((4,))
y2 = np.zeros((4,))
y = np.zeros((4,))
while con == 1:
    zin1 = np.zeros((4,))
    zin2 = np.zeros((4,))
    zin1 = x1 * w11 + x2 * w21
    zin2 = x1 * w21 + x2 * w22
    print("z1",zin1)
    print("z2", zin2)
    for i in range(0,4):
        if zin1[i] >=theta:
            y1[i] = 1
        else:
            y1[i] = 0

        if zin2[i] >=theta:
            y2[i] = 1
        else:
            y2[i] = 0

    yin =  np.array([])
    yin = y1 * v1 + y2 * v2
    for i in range(0,4):
        if yin[i] >=theta:
            y[i] = 1
        else:
            y[i] = 0

    print("yin",yin)
    print("Output of Net")
    y = y.astype(int)
    print("y",y)
    print("z",z)
    if np.array_equal(y,z):
        con = 0
    else:
        print("Net is not learning enter another set of weights and Threshold value")
        w11 = input("Weight w11 = ")
        w12 = input("Weight w12 = ")
w21 = input("Weight w21 = ")
        w22 = input("Weight w22 = ")
        v1 = input("Weight v1 = ")
        v2 = input("Weight v2 = ")
        theta = input("theta = ")
        print("McCulloch-pits Net for XOR function")
        print("Weights of Neuron Z1")
        print(w11)
        print(w21)
        print("Weights of Neuron Z2")
        print(w12)
        print(w22)
        print("Weights of Neuron Y")
        print(v1)
        print(v2)
        print("Threshold value")
        print(theta)
